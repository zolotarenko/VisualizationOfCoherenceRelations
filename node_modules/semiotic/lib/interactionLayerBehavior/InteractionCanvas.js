"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _frameFunctions = require("../svg/frameFunctions");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var InteractionCanvas =
/*#__PURE__*/
function (_React$Component) {
  _inherits(InteractionCanvas, _React$Component);

  function InteractionCanvas(props) {
    var _this;

    _classCallCheck(this, InteractionCanvas);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(InteractionCanvas).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "canvasMap", new Map());

    _defineProperty(_assertThisInitialized(_this), "canvasRendering", function () {
      var canvasMap = _this.canvasMap;
      var _this$state = _this.state,
          overlayRegions = _this$state.overlayRegions,
          interactionContext = _this$state.interactionContext;
      if (interactionContext === null || !overlayRegions) return;
      var _this$props = _this.props,
          height = _this$props.height,
          width = _this$props.width;
      var margin = _this.state.margin;
      canvasMap.clear();
      var interactionContext2D = interactionContext.getContext("2d");
      interactionContext2D.imageSmoothingEnabled = false;
      interactionContext2D.setTransform(1, 0, 0, 1, margin.left, margin.top);
      interactionContext2D.clearRect(-margin.left, -margin.top, width, height);
      interactionContext2D.lineWidth = 1;
      overlayRegions.forEach(function (overlay, oi) {
        var interactionRGBA = "rgba(".concat(Math.floor(Math.random() * 255), ",").concat(Math.floor(Math.random() * 255), ",").concat(Math.floor(Math.random() * 255), ",255)");
        canvasMap.set(interactionRGBA, oi);
        interactionContext2D.fillStyle = interactionRGBA;
        interactionContext2D.strokeStyle = interactionRGBA;
        var p = new Path2D(overlay.props.d);
        interactionContext2D.stroke(p);
        interactionContext2D.fill(p);
      });
    });

    var _overlayRegions = props.overlayRegions,
        _margin = props.margin;
    _this.state = {
      ref: null,
      interactionContext: null,
      overlayRegions: _overlayRegions,
      margin: _margin
    };
    return _this;
  }

  _createClass(InteractionCanvas, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.canvasRendering();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (this.state.overlayRegions !== prevState.overlayRegions) {
        this.canvasRendering();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          width = _this$props2.width,
          height = _this$props2.height,
          voronoiHover = _this$props2.voronoiHover;
      var overlayRegions = this.state.overlayRegions;
      return React.createElement("canvas", {
        className: "frame-canvas-interaction",
        ref: function ref(canvasContext) {
          var boundCanvasEvent = _frameFunctions.canvasEvent.bind(null, canvasContext, overlayRegions, _this2.canvasMap);

          if (canvasContext) {
            canvasContext.onmousemove = function (e) {
              var overlay = boundCanvasEvent(e);

              if (overlay && overlay.props) {
                overlay.props.onMouseEnter();
              } else {
                voronoiHover(null);
              }
            };

            canvasContext.onclick = function (e) {
              var overlay = boundCanvasEvent(e);

              if (overlay && overlay.props) {
                overlay.props.onClick();
              }
            };

            canvasContext.ondblclick = function (e) {
              var overlay = boundCanvasEvent(e);

              if (overlay && overlay.props) {
                overlay.props.onDoubleClick();
              }
            };
          }

          _this2.setState({
            interactionContext: canvasContext
          });
        },
        style: {
          position: "absolute",
          left: "0px",
          top: "0px",
          imageRendering: "pixelated",
          pointerEvents: "all",
          opacity: 0
        },
        width: width,
        height: height
      });
    }
  }]);

  return InteractionCanvas;
}(React.Component);

var _default = InteractionCanvas;
exports.default = _default;
module.exports = exports.default;